import { Character, isCharMale, isCharFamela, isCharUnisex } from './character';
import { Session } from './Session';
import { sample, upperFirst } from './utils';
import { createSpeech, Speech, speak, tts } from './speech';
import { emoji } from './emoji';

export type AnswerBuilder = (char: Character, previousChar: Character, random100: number) => Speech;

export function storyBegin(): Speech {
    return speak(
        '–ü–æ—Å–∞–¥–∏–ª –¥–µ–¥ —Ä–µ–ø–∫—É.',
        '–í—ã—Ä–æ—Å–ª–∞ —Ä–µ–ø–∫–∞ –±–æ–ª—å—à–∞—è-–ø—Ä–µ–±–æ–ª—å—à–∞—è. –°—Ç–∞–ª –¥–µ–¥ —Ä–µ–ø–∫—É –∏–∑ –∑–µ–º–ª–∏ —Ç—è–Ω—É—Ç—å. –¢—è–Ω–µ—Ç-–ø–æ—Ç—è–Ω–µ—Ç, –≤—ã—Ç—è–Ω—É—Ç—å –Ω–µ –º–æ–∂–µ—Ç. –ö–æ–≥–æ –ø–æ–∑–≤–∞–ª –¥–µ–¥–∫–∞?',
    );
}

export function intro(): Speech {
    return speak(
        ['–ü—Ä–∏–≤–µ—Ç, —Ä–µ–±—è—Ç–∞!', '–ü—Ä–∏–≤–µ—Ç - —Ä–µ–±—è—Ç–∞! - '],
        tts`–•–æ—Ç–∏—Ç–µ ${'- -'} –≤–º–µ—Å—Ç–µ ${'-'} —Å–æ—á–∏–Ω–∏—Ç—å —Å–∫–∞–∑–∫—É?${' - - '}`,
        tts`–í—ã —Å–ª—ã—à–∞–ª–∏ ${'-'} –∫–∞–∫ –ø–æ—Å–∞–¥–∏–ª –¥–µ–¥ —Ä–µ–ø–∫—É?${' - - '}`,
        tts`–ê –∫—Ç–æ –ø–æ–º–æ–≥–∞–ª –µ—ë —Ç—è–Ω—É—Ç—å? ${'- -'} –î–∞–≤–∞–π—Ç–µ –ø—Ä–∏–¥—É–º–∞–µ–º –≤–º–µ—Å—Ç–µ.${' - - - '}`,
        storyBegin(),
    );
}

export function whoCalled(session: Session) {
    const char = session.findLastCharacter();

    if (char) {
        return `–ö–æ–≥–æ ${called(char)} ${nom(char)}?`;
    }

    return '';
}

export function whoCalled2(char: Character) {
    return `–ö–æ–≥–æ ${called(char)} ${nom(char)}?`;
}

export function yesOrNoExpected(): Speech {
    return speak(
        ['–°–µ–π—á–∞—Å —è –æ–∂–∏–¥–∞—é –≤ –æ—Ç–≤–µ—Ç "–î–∞" –∏–ª–∏ "–ù–µ—Ç".', '—Å–µ–π—á–∞—Å —è –æ–∂–∏–¥–∞—é –≤ –æ—Ç–≤–µ—Ç - - –¥–∞ - - –∏–ª–∏  –Ω–µ—Ç.'],
        '–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É?',
    );
}

export function endOfStory() {
    return speak('–í–æ—Ç –∏ —Å–∫–∞–∑–∫–µ –∫–æ–Ω–µ—Ü, –∞ –∫—Ç–æ —Å–ª—É—à–∞–ª ‚Äî –º–æ–ª–æ–¥–µ—Ü.');
}

export function wrongCommand(char: Character) {
    return speak(
        `–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.`,
        tts`–î–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏ —Å–∫–∞–∂–∏—Ç–µ ${'-'} "–ü–æ–º–æ—â—å".`,
        whoCalled2(char),
    );
}

export function inanimateCalled(inanimate: Character, previousChar: Character) {
    const zval = byGender(previousChar, '–∑–≤–∞–ª', '–∑–≤–∞–ª–∞', '–∑–≤–∞–ª–æ');

    return speak(
        `–î–æ–ª–≥–æ ${zval} ${nom(previousChar)} ${acc(inanimate)} ‚Äî`,
        speak([
            byGender(previousChar, '–Ω–µ –¥–æ–∑–≤–∞–ª—Å—è.', '–Ω–µ –¥–æ–∑–≤–∞–ª–∞—Å—å.', '–Ω–µ –¥–æ–∑–≤–∞–ª–æ—Å—å.'),
            byGender(previousChar, ' - –Ω–µ –¥–æ–∑–≤+–∞–ª—Å—è.', ' - –Ω–µ –¥–æ–∑–≤–∞–ª+–∞—Å—å.', ' - –Ω–µ –¥–æ–∑–≤–∞–ª+–æ—Å—å.'),
        ]),
        '–î–∞–≤–∞–π—Ç–µ –ø–æ–∑–æ–≤–µ–º –¥—Ä—É–≥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.',
        whoCalled2(previousChar),
    );
}

export function formatStory(chars: readonly Character[]): Speech {
    const text: string[] = [];
    const tts: string[] = [];

    for (let i = 0; i < chars.length - 1; i++) {
        const sub = chars[i + 1];
        const obj = chars[i];
        const em = emoji[nom(sub)] || emoji[norm(sub)];
        const emojiPart = em ? ` ${em} ` : ' ';

        text.push(`${nom(sub)}${emojiPart} –∑–∞ ${acc(obj)}`);
        tts.push(`${nomTts(sub)} –∑–∞ ${accTts(obj)}`);
    }

    text.reverse();
    tts.reverse();

    return speak(
        [upperFirst(text.join(', ')), tts.join(' - ')],
        [`, –¥–µ–¥–∫–∞ üë¥ –∑–∞ —Ä–µ–ø–∫—É.`, ' - –¥–µ–¥–∫–∞ –∑–∞ —Ä–µ–ø–∫—É.'],
    );
}

export function success() {
    return speak(
        [
            '–¢—è–Ω—É—Ç-–ø–æ—Ç—è–Ω—É—Ç üéâ –≤—ã—Ç—è–Ω—É–ª–∏ —Ä–µ–ø–∫—É!',
            '–¢—è–Ω—É—Ç-–ø–æ—Ç—è–Ω—É—Ç <speaker audio="alice-sounds-human-kids-1.opus"> - –≤—ã—Ç—è–Ω—É–ª–∏ —Ä–µ–ø–∫—É!',
        ],
        '–ö–∞–∫–∞—è –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Å–∫–∞–∑–∫–∞! –•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É?',
    );
}

export function failure(char: Character) {
    return speak(`–¢—è–Ω—É—Ç-–ø–æ—Ç—è–Ω—É—Ç ‚Äî –≤—ã—Ç—è–Ω—É—Ç—å –Ω–µ –º–æ–≥—É—Ç.`, whoCalled2(char));
}

export const chars = {
    granny(char: Character) {
        const come = comeCapitalized(char);
        return speak(`${come} ${nom(char)}.`);
    },
    grandfather(char: Character, previousChar: Character, random100: number) {
        const come = comeCapitalized(char);
        const soundNumber = sample([1, 2], random100);

        return speak([
            `${come} ${nom(char)}.`,
            `${come} ${nom(
                char,
            )} - <speaker audio="alice-sounds-human-sneeze-${soundNumber}.opus">.`,
        ]);
    },
    alice() {
        return speak([
            `–ó–∞–ø—É—Å—Ç–∏–ª–∞—Å—å –ê–ª–∏—Å–∞.`,
            `–ó–∞–ø—É—Å—Ç–∏–ª–∞—Å—å –ê–ª–∏—Å–∞ - <speaker audio="dialogs-upload/d72eedce-c6f5-412b-8ed7-93cdccd9b716/8331f8db-0b01-4fcc-8530-ba8c1c676643.opus">.`,
        ]);
    },
    mouse(mouse: Character) {
        const come = comeRunningCapitalized(mouse);

        return speak([
            `${come} ${nom(mouse)}.`,
            `${come} ${nom(mouse)} - <speaker audio="alice-music-violin-b-1.opus">.`,
        ]);
    },
    cat(char: Character, previousChar: Character, random100: number) {
        const useSOftMeow = isCharFamela(char) || nom(char).includes('–∫–æ—Ç–µ–Ω');
        const soundNumber = sample(useSOftMeow ? [3, 4] : [1, 2], random100);
        const meow = speak([
            '- –º—è—É -',
            `<speaker audio="alice-sounds-animals-cat-${soundNumber}.opus">`,
        ]);

        const clung = byGender(char, '–≤—Ü–µ–ø–∏–ª—Å—è', '–≤—Ü–µ–ø–∏–ª–∞—Å—å', '–≤—Ü–µ–ø–∏–ª–æ—Å—å');
        const name = nom(char);
        const description = name === '–º—É—Ä–∫–∞' ? '–∫–æ—à–∫–∞ ' : '';

        return speak(
            byGender(char, '–ü—Ä–∏–±–µ–∂–∞–ª', '–ü—Ä–∏–±–µ–∂–∞–ª–∞', '–ü—Ä–∏–±–µ–∂–∞–ª–æ'),
            `${description}${name}`,
            meow,
            `–∏ ${clung} –≤ ${acc(previousChar)}.`,
        );
    },
    dog(dog: Character, _prev: Character, random100: number) {
        const come = comeRunningCapitalized(dog);
        const soundNumber = sample([3, 5], random100);

        return speak([
            `${come} ${nom(dog)}.`,
            `${come} ${nomTts(
                dog,
            )} - <speaker audio="alice-sounds-animals-dog-${soundNumber}.opus">.`,
        ]);
    },
    owl(owl: Character, _prev: Character, random100: number) {
        const come = flownCapitalized(owl);
        const soundNumber = sample([1, 2], random100);

        return createSpeech(
            `${come} ${nom(owl)}.`,
            `${come} ${nom(owl)} - <speaker audio="alice-sounds-animals-owl-${soundNumber}.opus">.`,
        );
    },
    rooster(rooster: Character) {
        const come = flownCapitalized(rooster);

        return createSpeech(
            `${come} ${nom(rooster)}.`,
            `${come} ${nom(rooster)} - <speaker audio="alice-sounds-animals-rooster-1.opus">.`,
        );
    },
    wolf(wolf: Character) {
        const come = comeRunningCapitalized(wolf);

        return createSpeech(
            `${come} ${nom(wolf)}.`,
            `${come} ${nom(wolf)} - <speaker audio="alice-sounds-animals-wolf-1.opus">.`,
        );
    },
    fox(char: Character) {
        const come = comeRunningCapitalized(char);

        return createSpeech(
            `${come} ${nom(char)}.`,
            `${come} ${nom(char)} - <speaker audio="alice-music-violin-c-1.opus">.`,
        );
    },
    bear(char: Character, prev: Character, random100: number) {
        const come = comeCapitalized(char);

        const sound = sample(
            [
                '<speaker audio="dialogs-upload/d72eedce-c6f5-412b-8ed7-93cdccd9b716/e29520bc-c2e2-40e5-9b7a-bc805fe89b1e.opus">',
                '<speaker audio="dialogs-upload/d72eedce-c6f5-412b-8ed7-93cdccd9b716/baef2695-35fd-471b-b40f-7c34f7eeec31.opus">',
            ],
            random100,
        );

        return speak([`${come} ${nom(char)}.`, `${come} ${nom(char)} - ${sound}.`]);
    },
    crow(crow: Character) {
        const come = flownCapitalized(crow);

        return createSpeech(
            `${come} ${nom(crow)}.`,
            `${come} ${nom(crow)} - <speaker audio="alice-sounds-animals-crow-1.opus">.`,
        );
    },
    lion(lion: Character) {
        const come = comeCapitalized(lion);

        return createSpeech(
            `${come} ${nom(lion)}.`,
            `${come} ${nom(lion)} - <speaker audio="alice-sounds-animals-lion-1.opus">.`,
        );
    },
    cow(cow: Character) {
        const come = comeCapitalized(cow);

        return createSpeech(
            `${come} ${nom(cow)}.`,
            `${come} ${nom(cow)} - <speaker audio="alice-sounds-animals-cow-2.opus">.`,
        );
    },
    horse(horse: Character, _prev: Character, random100: number) {
        const come = riddenCapitalized(horse);
        const soundNumber = (random100 % 2) + 1;

        return createSpeech(
            `${come} ${nom(horse)}.`,
            `${come} ${nom(
                horse,
            )} - <speaker audio="alice-sounds-animals-horse-${soundNumber}.opus">.`,
        );
    },
    chicken(chicken: Character) {
        const come = comeRunningCapitalized(chicken);

        return createSpeech(
            `${come} ${nom(chicken)}.`,
            `${come} ${nom(chicken)} - <speaker audio="alice-sounds-animals-chicken-1.opus">.`,
        );
    },
    frog(frog: Character) {
        const come = riddenCapitalized(frog);

        return createSpeech(
            `${come} ${nom(frog)}.`,
            `${come} ${nom(frog)} - <speaker audio="alice-sounds-animals-frog-1.opus">.`,
        );
    },
    elephant(char: Character, _previousChar: Character, random100: number): Speech {
        const come = comeCapitalized(char);
        const n = sample([1, 2], random100);

        return createSpeech(
            `${come} ${nom(char)}.`,
            `${come} ${nom(char)} - <speaker audio="alice-sounds-animals-elephant-${n}.opus">.`,
        );
    },
    fish(char: Character, previousChar: Character) {
        const nemu = byGender(previousChar, '–Ω–µ–º—É', '–Ω–µ–π', '–Ω–µ–º—É');
        const poshel = byGender(previousChar, '–ü–æ—à—ë–ª', '–ü–æ—à–ª–∞', '–ü–æ—à–ª–æ');
        const stalOn = byGender(previousChar, '—Å—Ç–∞–ª –æ–Ω', '—Å—Ç–∞–ª–∞ –æ–Ω–∞', '—Å—Ç–∞–ª–æ –æ–Ω–æ');

        return speak(
            `${poshel} ${nom(previousChar)} –∫ —Å–∏–Ω–µ–º—É –º–æ—Ä—é;`,
            createSpeech('', '<speaker audio="alice-sounds-nature-sea-1.opus"> - - '),
            `${stalOn} –∫–ª–∏–∫–∞—Ç—å ${acc(char)}, –ø—Ä–∏–ø–ª—ã–ª–∞ –∫ ${nemu} —Ä—ã–±–∫–∞, —Å–ø—Ä–æ—Å–∏–ª–∞:`,
            `¬´–ß–µ–≥–æ —Ç–µ–±–µ –Ω–∞–¥–æ–±–Ω–æ ${nom(previousChar)}?¬ª`,
            `–ï–π —Å –ø–æ–∫–ª–æ–Ω–æ–º ${nom(previousChar)} –æ—Ç–≤–µ—á–∞–µ—Ç:`,
            `¬´–°–º–∏–ª—É–π—Å—è, –≥–æ—Å—É–¥–∞—Ä—ã–Ω—è —Ä—ã–±–∫–∞, –ø–æ–º–æ–≥–∏ –≤—ã—Ç—è–Ω—É—Ç—å —Ä–µ–ø–∫—É.¬ª`,
        );
    },
    girl(char: Character) {
        const come = comeRunningCapitalized(char);

        return createSpeech(
            `${come} ${nom(char)}.`,
            `${come} ${nom(char)} - <speaker audio="alice-sounds-human-laugh-5.opus">.`,
        );
    },

    zombie(char: Character, previousChar: Character) {
        const come = comeRunningCapitalized(char);

        return createSpeech(
            `–ü—Ä–∏—à–ª–æ —Å—Ç—Ä–∞—à–Ω–æ–µ ${nom(char)} –∏ —Å—Ö–≤–∞—Ç–∏–ª–æ ${acc(previousChar)}.`,
            `–ü—Ä–∏—à–ª–æ —Å—Ç—Ä–∞—à–Ω–æ–µ ${nom(
                char,
            )} - <speaker audio="alice-sounds-human-walking-dead-2.opus"> - –∏ —Å—Ö–≤–∞—Ç–∏–ª–æ ${acc(
                previousChar,
            )}.`,
        );
    },
};

function called(char: Character) {
    return byGender(char, '–ø–æ–∑–≤–∞–ª', '–ø–æ–∑–≤–∞–ª–∞', '–ø–æ–∑–≤–∞–ª–æ');
}

function byGender<T>(char: Character, male: T, famela: T, other: T) {
    if (isCharMale(char) || isCharUnisex(char)) {
        return male;
    }

    return isCharFamela(char) ? famela : other;
}

export function nom(char: Character) {
    return char.subject.nominative;
}

export function nomTts(char: Character) {
    return char.tts ? char.tts.nominative : char.subject.nominative;
}

export function acc(char: Character) {
    return char.subject.accusative;
}

export function accTts(char: Character) {
    return char.tts ? char.tts.accusative : char.subject.accusative;
}

export function norm(char: Character) {
    return char.normal;
}

function comeRunningCapitalized(char: Character) {
    return byGender(char, '–ü—Ä–∏–±–µ–∂–∞–ª', '–ü—Ä–∏–±–µ–∂–∞–ª–∞', '–ü—Ä–∏–±–µ–∂–∞–ª–æ');
}

function comeCapitalized(char: Character) {
    return byGender(char, '–ü—Ä–∏—à—ë–ª', '–ü—Ä–∏—à–ª–∞', '–ü—Ä–∏—à–ª–æ');
}

function riddenCapitalized(char: Character) {
    return byGender(char, '–ü—Ä–∏—Å–∫–∞–∫–∞–ª', '–ü—Ä–∏—Å–∫–∞–∫–∞–ª–∞', '–ü—Ä–∏—Å–∫–∞–∫–∞–ª–æ');
}

function flownCapitalized(char: Character) {
    return byGender(char, '–ü—Ä–∏–ª–µ—Ç–µ–ª', '–ü—Ä–∏–ª–µ—Ç–µ–ª–∞', '–ü—Ä–∏–ª–µ—Ç–µ–ª–æ');
}
