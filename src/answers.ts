import { Character } from './Character';
import { sample, upperFirst } from './utils';
import { createSpeech, Speech, speak, tts } from './speech';
import { emoji } from './emoji';

export type AnswerBuilder = (char: Character, previousChar: Character, random100: number) => Speech;

export function storyBegin(): Speech {
    return speak(
        '–ü–æ—Å–∞–¥–∏–ª –¥–µ–¥ —Ä–µ–ø–∫—É.',
        '–í—ã—Ä–æ—Å–ª–∞ —Ä–µ–ø–∫–∞ –±–æ–ª—å—à–∞—è-–ø—Ä–µ–±–æ–ª—å—à–∞—è. –°—Ç–∞–ª –¥–µ–¥ —Ä–µ–ø–∫—É –∏–∑ –∑–µ–º–ª–∏ —Ç—è–Ω—É—Ç—å. –¢—è–Ω–µ—Ç-–ø–æ—Ç—è–Ω–µ—Ç, –≤—ã—Ç—è–Ω—É—Ç—å –Ω–µ –º–æ–∂–µ—Ç. –ö–æ–≥–æ –ø–æ–∑–≤–∞–ª –¥–µ–¥–∫–∞?'
    );
}

export function intro(): Speech {
    return speak(
        ['–ü—Ä–∏–≤–µ—Ç, —Ä–µ–±—è—Ç–∞!', '–ü—Ä–∏–≤–µ—Ç - —Ä–µ–±—è—Ç–∞! - '],
        tts`–•–æ—Ç–∏—Ç–µ ${'- -'} –≤–º–µ—Å—Ç–µ ${'-'} —Å–æ—á–∏–Ω–∏—Ç—å —Å–∫–∞–∑–∫—É?${' - - '}`,
        tts`–í—ã —Å–ª—ã—à–∞–ª–∏ ${'-'} –∫–∞–∫ –ø–æ—Å–∞–¥–∏–ª –¥–µ–¥ —Ä–µ–ø–∫—É?${' - - '}`,
        tts`–ê –∫—Ç–æ –ø–æ–º–æ–≥–∞–ª –µ—ë —Ç—è–Ω—É—Ç—å? ${'- -'} –î–∞–≤–∞–π—Ç–µ –ø—Ä–∏–¥—É–º–∞–µ–º –≤–º–µ—Å—Ç–µ.${' - - - '}`,
        storyBegin()
    );
}

export function whoCalled2(char: Character) {
    return `–ö–æ–≥–æ ${called(char)} ${char.nominative}?`;
}

export function yesOrNoExpected(): Speech {
    return speak(
        ['–°–µ–π—á–∞—Å —è –æ–∂–∏–¥–∞—é –≤ –æ—Ç–≤–µ—Ç "–î–∞" –∏–ª–∏ "–ù–µ—Ç".', '—Å–µ–π—á–∞—Å —è –æ–∂–∏–¥–∞—é –≤ –æ—Ç–≤–µ—Ç - - –¥–∞ - - –∏–ª–∏  –Ω–µ—Ç.'],
        '–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É?'
    );
}

export function endOfStory() {
    return speak('–í–æ—Ç –∏ —Å–∫–∞–∑–∫–µ –∫–æ–Ω–µ—Ü, –∞ –∫—Ç–æ —Å–ª—É—à–∞–ª ‚Äî –º–æ–ª–æ–¥–µ—Ü.');
}

export function wrongCommand(char: Character) {
    return speak(
        `–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.`,
        tts`–î–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏ —Å–∫–∞–∂–∏—Ç–µ ${'-'} "–ü–æ–º–æ—â—å".`,
        whoCalled2(char)
    );
}

export function inanimateCalled(inanimate: Character, previousChar: Character) {
    const zval = previousChar.byGender('–∑–≤–∞–ª', '–∑–≤–∞–ª–∞', '–∑–≤–∞–ª–æ');

    return speak(
        `–î–æ–ª–≥–æ ${zval} ${previousChar.nominative} ${inanimate.accusative} ‚Äî`,
        speak([
            previousChar.byGender('–Ω–µ –¥–æ–∑–≤–∞–ª—Å—è.', '–Ω–µ –¥–æ–∑–≤–∞–ª–∞—Å—å.', '–Ω–µ –¥–æ–∑–≤–∞–ª–æ—Å—å.'),
            previousChar.byGender(' - –Ω–µ –¥–æ–∑–≤+–∞–ª—Å—è.', ' - –Ω–µ –¥–æ–∑–≤–∞–ª+–∞—Å—å.', ' - –Ω–µ –¥–æ–∑–≤–∞–ª+–æ—Å—å.'),
        ]),
        '–î–∞–≤–∞–π—Ç–µ –ø–æ–∑–æ–≤–µ–º –¥—Ä—É–≥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.',
        whoCalled2(previousChar)
    );
}

export function formatStory(chars: readonly Character[]): Speech {
    const text: string[] = [];
    const tts: string[] = [];

    for (let i = 0; i < chars.length - 1; i++) {
        const sub = chars[i + 1];
        const obj = chars[i];
        const em = emoji[sub.nominative] || emoji[sub.normal];
        const emojiPart = em ? ` ${em} ` : ' ';

        text.push(`${sub.nominative}${emojiPart} –∑–∞ ${obj.accusative}`);
        tts.push(`${sub.nominativeTts} –∑–∞ ${obj.accusativeTts}`);
    }

    text.reverse();
    tts.reverse();

    return speak(
        [upperFirst(text.join(', ')), tts.join(' - ')],
        [`, –¥–µ–¥–∫–∞ üë¥ –∑–∞ —Ä–µ–ø–∫—É.`, ' - –¥–µ–¥–∫–∞ –∑–∞ —Ä–µ–ø–∫—É.']
    );
}

export function success() {
    return speak(
        [
            '–¢—è–Ω—É—Ç-–ø–æ—Ç—è–Ω—É—Ç üéâ –≤—ã—Ç—è–Ω—É–ª–∏ —Ä–µ–ø–∫—É!',
            '–¢—è–Ω—É—Ç-–ø–æ—Ç—è–Ω—É—Ç <speaker audio="alice-sounds-human-kids-1.opus"> - –≤—ã—Ç—è–Ω—É–ª–∏ —Ä–µ–ø–∫—É!',
        ],
        '–ö–∞–∫–∞—è –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Å–∫–∞–∑–∫–∞! –•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É?'
    );
}

export function cantPull(char: Character) {
    return speak(`–¢—è–Ω—É—Ç-–ø–æ—Ç—è–Ω—É—Ç ‚Äî –≤—ã—Ç—è–Ω—É—Ç—å –Ω–µ –º–æ–≥—É—Ç.`, whoCalled2(char));
}

export const chars = {
    granny(char: Character) {
        const come = comeCapitalized(char);
        return speak(`${come} ${char.nominative}.`);
    },
    grandfather(char: Character, previousChar: Character, random100: number) {
        const come = comeCapitalized(char);
        const soundNumber = sample([1, 2], random100);

        return speak([
            `${come} ${char.nominative}.`,
            `${come} ${char.nominative} - <speaker audio="alice-sounds-human-sneeze-${soundNumber}.opus">.`,
        ]);
    },
    alice() {
        return speak([`–ó–∞–ø—É—Å—Ç–∏–ª–∞—Å—å –ê–ª–∏—Å–∞.`, `–ó–∞–ø—É—Å—Ç–∏–ª–∞—Å—å –ê–ª–∏—Å–∞.`]);
    },

    harryPotter() {
        return speak([`–ê–∫—Ü–∏–æ, —Ä–µ–ø–∫–∞!`, `+–ê–∫—Ü–æ, —Ä–µ–ø–∫–∞!  - - - `]);
    },
    mouse(char: Character) {
        const come = comeRunningCapitalized(char);

        return speak([
            `${come} ${char.nominative}.`,
            `${come} ${char.nominative} - <speaker audio="alice-music-violin-b-1.opus">.`,
        ]);
    },
    rat(char: Character, previousChar: Character, random100: number) {
        const come = comeRunningCapitalized(char);

        const sound = sample(
            [
                '<speaker audio="dialogs-upload/d72eedce-c6f5-412b-8ed7-93cdccd9b716/01ae230e-69f3-4f76-93e8-8da388f7cf65.opus">',
                '<speaker audio="dialogs-upload/d72eedce-c6f5-412b-8ed7-93cdccd9b716/7f7c2a7d-b8bc-4a13-ad74-c1d0bf5f5797.opus">',
            ],
            random100
        );

        return speak([`${come} ${char.nominative}.`, `${come} ${char.nominative} - ${sound}.`]);
    },
    dino(char: Character, previousChar: Character, random100: number) {
        const come = comeCapitalized(char);

        const sound = sample(
            [
                '<speaker audio="dialogs-upload/d72eedce-c6f5-412b-8ed7-93cdccd9b716/69921ea2-cc7c-46fa-9390-ad946e74da05.opus">',
                '<speaker audio="dialogs-upload/d72eedce-c6f5-412b-8ed7-93cdccd9b716/7f5e067f-f1c7-45c8-ac0e-136ed2946e48.opus">',
            ],
            random100
        );

        return speak([`${come} ${char.nominative}.`, `${come} ${char.nominative} - ${sound}.`]);
    },
    cat(char: Character, previousChar: Character, random100: number) {
        const famelaMeow = [3, 4];
        const maleMeow = char.nominative.includes('–∫–æ—Ç–µ–Ω') ? famelaMeow : [1, 2];

        const soundNumber = sample(char.byGender(maleMeow, famelaMeow, maleMeow), random100);
        const meow = speak([
            '- –º—è—É -',
            `<speaker audio="alice-sounds-animals-cat-${soundNumber}.opus">`,
        ]);

        const clung = char.byGender('–≤—Ü–µ–ø–∏–ª—Å—è', '–≤—Ü–µ–ø–∏–ª–∞—Å—å', '–≤—Ü–µ–ø–∏–ª–æ—Å—å');
        const name = char.nominative;
        const description = name === '–º—É—Ä–∫–∞' ? '–∫–æ—à–∫–∞ ' : '';

        return speak(
            char.byGender('–ü—Ä–∏–±–µ–∂–∞–ª', '–ü—Ä–∏–±–µ–∂–∞–ª–∞', '–ü—Ä–∏–±–µ–∂–∞–ª–æ'),
            `${description}${name}`,
            meow,
            `–∏ ${clung} –≤ ${previousChar.accusative}.`
        );
    },
    dog(char: Character, _prev: Character, random100: number) {
        const come = comeRunningCapitalized(char);
        const soundNumber = sample([3, 5], random100);

        return speak([
            `${come} ${char.nominative}.`,
            `${come} ${char.nominativeTts} - <speaker audio="alice-sounds-animals-dog-${soundNumber}.opus">.`,
        ]);
    },
    owl(char: Character, _prev: Character, random100: number) {
        const come = flownCapitalized(char);
        const soundNumber = sample([1, 2], random100);

        return createSpeech(
            `${come} ${char.nominative}.`,
            `${come} ${char.nominative} - <speaker audio="alice-sounds-animals-owl-${soundNumber}.opus">.`
        );
    },
    rooster(char: Character) {
        const come = flownCapitalized(char);

        return createSpeech(
            `${come} ${char.nominative}.`,
            `${come} ${char.nominative} - <speaker audio="alice-sounds-animals-rooster-1.opus">.`
        );
    },
    wolf(char: Character) {
        const come = comeRunningCapitalized(char);

        return createSpeech(
            `${come} ${char.nominative}.`,
            `${come} ${char.nominative} - <speaker audio="alice-sounds-animals-wolf-1.opus">.`
        );
    },
    fox(char: Character) {
        const come = comeRunningCapitalized(char);

        return createSpeech(
            `${come} ${char.nominative}.`,
            `${come} ${char.nominative} - <speaker audio="alice-music-violin-c-1.opus">.`
        );
    },
    bear(char: Character, prev: Character, random100: number) {
        const come = comeCapitalized(char);

        const sound = sample(
            [
                '<speaker audio="dialogs-upload/d72eedce-c6f5-412b-8ed7-93cdccd9b716/e29520bc-c2e2-40e5-9b7a-bc805fe89b1e.opus">',
                '<speaker audio="dialogs-upload/d72eedce-c6f5-412b-8ed7-93cdccd9b716/baef2695-35fd-471b-b40f-7c34f7eeec31.opus">',
            ],
            random100
        );

        return speak([`${come} ${char.nominative}.`, `${come} ${char.nominative} - ${sound}.`]);
    },
    crow(char: Character) {
        const come = flownCapitalized(char);

        return createSpeech(
            `${come} ${char.nominative}.`,
            `${come} ${char.nominative} - <speaker audio="alice-sounds-animals-crow-1.opus">.`
        );
    },
    lion(char: Character) {
        const come = comeCapitalized(char);

        return createSpeech(
            `${come} ${char.nominative}.`,
            `${come} ${char.nominative} - <speaker audio="alice-sounds-animals-lion-1.opus">.`
        );
    },
    cow(char: Character) {
        const come = comeCapitalized(char);

        return createSpeech(
            `${come} ${char.nominative}.`,
            `${come} ${char.nominative} - <speaker audio="alice-sounds-animals-cow-2.opus">.`
        );
    },
    crocodile(char: Character) {
        const come = crawledCapitalized(char);

        return createSpeech(
            `${come} ${char.nominative}.`,
            `${come} ${char.nominative} - <speaker audio="dialogs-upload/d72eedce-c6f5-412b-8ed7-93cdccd9b716/38d9977f-9dd8-421d-866c-14900749f7cd.opus">.`
        );
    },
    tiger(char: Character) {
        const come = comeRunningCapitalized(char);

        return createSpeech(
            `${come} ${char.nominative}.`,
            `${come} ${char.nominative} - <speaker audio="dialogs-upload/d72eedce-c6f5-412b-8ed7-93cdccd9b716/29479c2a-e251-495a-a387-1473c5422aff.opus">.`
        );
    },
    horse(char: Character, _prev: Character, random100: number) {
        const come = riddenCapitalized(char);
        const soundNumber = (random100 % 2) + 1;

        return createSpeech(
            `${come} ${char.nominative}.`,
            `${come} ${char.nominative} - <speaker audio="alice-sounds-animals-horse-${soundNumber}.opus">.`
        );
    },
    chicken(char: Character) {
        const come = comeRunningCapitalized(char);

        return createSpeech(
            `${come} ${char.nominative}.`,
            `${come} ${char.nominative} - <speaker audio="alice-sounds-animals-chicken-1.opus">.`
        );
    },
    frog(char: Character) {
        const come = riddenCapitalized(char);

        return createSpeech(
            `${come} ${char.nominative}.`,
            `${come} ${char.nominative} - <speaker audio="alice-sounds-animals-frog-1.opus">.`
        );
    },
    elephant(char: Character, _previousChar: Character, random100: number): Speech {
        const come = comeCapitalized(char);
        const n = sample([1, 2], random100);

        return createSpeech(
            `${come} ${char.nominative}.`,
            `${come} ${char.nominative} - <speaker audio="alice-sounds-animals-elephant-${n}.opus">.`
        );
    },
    fish(char: Character, previousChar: Character) {
        const nemu = previousChar.byGender('–Ω–µ–º—É', '–Ω–µ–π', '–Ω–µ–º—É');
        const poshel = previousChar.byGender('–ü–æ—à—ë–ª', '–ü–æ—à–ª–∞', '–ü–æ—à–ª–æ');
        const stalOn = previousChar.byGender('—Å—Ç–∞–ª –æ–Ω', '—Å—Ç–∞–ª–∞ –æ–Ω–∞', '—Å—Ç–∞–ª–æ –æ–Ω–æ');

        return speak(
            `${poshel} ${previousChar.nominative} –∫ —Å–∏–Ω–µ–º—É –º–æ—Ä—é;`,
            createSpeech('', '<speaker audio="alice-sounds-nature-sea-1.opus"> - - '),
            `${stalOn} –∫–ª–∏–∫–∞—Ç—å ${char.accusative}, –ø—Ä–∏–ø–ª—ã–ª–∞ –∫ ${nemu} —Ä—ã–±–∫–∞, —Å–ø—Ä–æ—Å–∏–ª–∞:`,
            `¬´–ß–µ–≥–æ —Ç–µ–±–µ –Ω–∞–¥–æ–±–Ω–æ ${previousChar.nominative}?¬ª`,
            `–ï–π —Å –ø–æ–∫–ª–æ–Ω–æ–º ${previousChar.nominative} –æ—Ç–≤–µ—á–∞–µ—Ç:`,
            `¬´–°–º–∏–ª—É–π—Å—è, –≥–æ—Å—É–¥–∞—Ä—ã–Ω—è —Ä—ã–±–∫–∞, –ø–æ–º–æ–≥–∏ –≤—ã—Ç—è–Ω—É—Ç—å —Ä–µ–ø–∫—É.¬ª`
        );
    },
    girl(char: Character) {
        const come = comeRunningCapitalized(char);

        return createSpeech(
            `${come} ${char.nominative}.`,
            `${come} ${char.nominative} - <speaker audio="alice-sounds-human-laugh-5.opus">.`
        );
    },

    zombie(char: Character, previousChar: Character) {
        const come = comeRunningCapitalized(char);

        return createSpeech(
            `–ü—Ä–∏—à–ª–æ —Å—Ç—Ä–∞—à–Ω–æ–µ ${char.nominative} –∏ —Å—Ö–≤–∞—Ç–∏–ª–æ ${previousChar.accusative}.`,
            `–ü—Ä–∏—à–ª–æ —Å—Ç—Ä–∞—à–Ω–æ–µ ${char.nominative} - <speaker audio="alice-sounds-human-walking-dead-2.opus"> - –∏ —Å—Ö–≤–∞—Ç–∏–ª–æ ${previousChar.accusative}.`
        );
    },
};

function called(char: Character) {
    return char.byGender('–ø–æ–∑–≤–∞–ª', '–ø–æ–∑–≤–∞–ª–∞', '–ø–æ–∑–≤–∞–ª–æ');
}

function heSheIt(char: Character) {
    return char.byGender('–æ–Ω', '–æ–Ω–∞', '–æ–Ω–æ');
}

function comeRunningCapitalized(char: Character) {
    return char.byGender('–ü—Ä–∏–±–µ–∂–∞–ª', '–ü—Ä–∏–±–µ–∂–∞–ª–∞', '–ü—Ä–∏–±–µ–∂–∞–ª–æ');
}

function comeCapitalized(char: Character) {
    return char.byGender('–ü—Ä–∏—à—ë–ª', '–ü—Ä–∏—à–ª–∞', '–ü—Ä–∏—à–ª–æ');
}

function riddenCapitalized(char: Character) {
    return char.byGender('–ü—Ä–∏—Å–∫–∞–∫–∞–ª', '–ü—Ä–∏—Å–∫–∞–∫–∞–ª–∞', '–ü—Ä–∏—Å–∫–∞–∫–∞–ª–æ');
}

function flownCapitalized(char: Character) {
    return char.byGender('–ü—Ä–∏–ª–µ—Ç–µ–ª', '–ü—Ä–∏–ª–µ—Ç–µ–ª–∞', '–ü—Ä–∏–ª–µ—Ç–µ–ª–æ');
}

function crawledCapitalized(char: Character) {
    return char.byGender('–ü—Ä–∏–ø–æ–ª–∑', '–ü—Ä–∏–ø–æ–ª–∑–ª–∞', '–ü—Ä–∏–ø–æ–ª–∑–ª–æ');
}
