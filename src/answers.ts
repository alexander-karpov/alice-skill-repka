import * as _ from 'lodash';
import { Character, isCharMale, isCharFamela, isCharUnisex } from './character';
import { SessionData, Dialogs, GameMode } from './sessionData';
import { sample } from './utils';
import { createSpeech, Speech, speak, tts } from './speech';
import { alphabetFirstLetter } from './alphabet';

export type AnswerBuilder = (char: Character, previousChar: Character, random100: number) => Speech;

function aboutSkill(): Speech {
    return speak(
        '–î–∞–≤–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ —Å–æ—á–∏–Ω–∏–º —Å–∫–∞–∑–∫—É.',
        tts`–í—ã —Å–ª—ã—à–∞–ª–∏ ${'-'} –∫–∞–∫ –ø–æ—Å–∞–¥–∏–ª –¥–µ–¥`,
        ['üë¥', ''],
        '—Ä–µ–ø–∫—É? –ê –∫—Ç–æ –ø–æ–º–æ–≥–∞–ª –µ—ë —Ç—è–Ω—É—Ç—å? –î–∞–≤–∞–π—Ç–µ –ø—Ä–∏–¥—É–º–∞–µ–º –≤–º–µ—Å—Ç–µ.',
    );
}

export function storyBegin(mode: GameMode): Speech {
    return speak(
        mode === GameMode.BlackCity
            ? tts`–•–æ—Ä–æ—à–æ! –í –æ–¥–Ω–æ–º —á—ë—Ä–Ω–æ–º-—á—ë—Ä–Ω–æ–º –≥–æ—Ä–æ–¥–µ ${'- -'} –ø–æ—Å–∞–¥–∏–ª –¥–µ–¥ —Ä–µ–ø–∫—É.`
            : '–ü–æ—Å–∞–¥–∏–ª –¥–µ–¥ —Ä–µ–ø–∫—É.',
        '–í—ã—Ä–æ—Å–ª–∞ —Ä–µ–ø–∫–∞ –±–æ–ª—å—à–∞—è-–ø—Ä–µ–±–æ–ª—å—à–∞—è. –°—Ç–∞–ª –¥–µ–¥ —Ä–µ–ø–∫—É –∏–∑ –∑–µ–º–ª–∏ —Ç—è–Ω—É—Ç—å. –¢—è–Ω–µ—Ç-–ø–æ—Ç—è–Ω–µ—Ç, –≤—ã—Ç—è–Ω—É—Ç—å –Ω–µ –º–æ–∂–µ—Ç. –ö–æ–≥–æ –ø–æ–∑–≤–∞–ª –¥–µ–¥–∫–∞?',
        mode === GameMode.BlackCity ? blackCityManual() : '',
    );
}

export function blackCityManual() {
    return speak('–í —á—ë—Ä–Ω–æ–º –≥–æ—Ä–æ–¥–µ –≤—Å–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –Ω–∞ –±—É–∫–≤—É', speak(['"–ß".', ' - –ß—ç.']));
}

export function blackCityError(char: Character) {
    return speak(
        `${_.upperFirst(norm(char))} –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞ –±—É–∫–≤—É`,
        alphabetFirstLetter(char),
        '.',
        blackCityManual(),
    );
}

export function intro(random100: number): Speech {
    return speak(
        sample(['–•–æ—Ä–æ—à–æ.', '–° —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º!'], random100),
        aboutSkill(),
        storyBegin(GameMode.Classic),
    );
}

export function help(sessionData: SessionData) {
    const char = _.last(sessionData.chars);

    if (char) {
        return speak(aboutSkill(), whoCalled2(char));
    }

    return aboutSkill();
}

export function whoCalled(sessionData: SessionData) {
    const char = _.last(sessionData.chars);

    if (char) {
        return `–ö–æ–≥–æ ${called(char)} ${nom(char)}?`;
    }

    return '';
}

export function whoCalled2(char: Character) {
    return `–ö–æ–≥–æ ${called(char)} ${nom(char)}?`;
}

export function yesOrNoExpected(): Speech {
    return speak([
        '–°–µ–π—á–∞—Å —è –æ–∂–∏–¥–∞—é –≤ –æ—Ç–≤–µ—Ç "–î–∞" –∏–ª–∏ "–ù–µ—Ç".',
        '—Å–µ–π—á–∞—Å —è –æ–∂–∏–¥–∞—é –≤ –æ—Ç–≤–µ—Ç - - –¥–∞ - - –∏–ª–∏  –Ω–µ—Ç.',
    ]);
}

export function endOfStory() {
    return speak('–í–æ—Ç –∏ —Å–∫–∞–∑–∫–µ –∫–æ–Ω–µ—Ü, –∞ –∫—Ç–æ —Å–ª—É—à–∞–ª ‚Äî –º–æ–ª–æ–¥–µ—Ü.');
}

export function wrongCommand(sessionData: SessionData) {
    return speak(`–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.`, help(sessionData));
}

export function inanimateCalled(inanimate: Character, previousChar: Character) {
    const zval = byGender(previousChar, '–∑–≤–∞–ª', '–∑–≤–∞–ª–∞', '–∑–≤–∞–ª–æ');

    return speak(
        `–î–æ–ª–≥–æ ${zval} ${nom(previousChar)} ${acc(inanimate)} ‚Äî`,
        speak([
            byGender(previousChar, '–Ω–µ –¥–æ–∑–≤–∞–ª—Å—è.', '–Ω–µ –¥–æ–∑–≤–∞–ª–∞—Å—å.', '–Ω–µ –¥–æ–∑–≤–∞–ª–æ—Å—å.'),
            byGender(previousChar, ' - –Ω–µ –¥–æ–∑–≤+–∞–ª—Å—è.', ' - –Ω–µ –¥–æ–∑–≤–∞–ª+–∞—Å—å.', ' - –Ω–µ –¥–æ–∑–≤–∞–ª+–æ—Å—å.'),
        ]),
        '–î–∞–≤–∞–π—Ç–µ –ø–æ–∑–æ–≤–µ–º –¥—Ä—É–≥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.',
        whoCalled2(previousChar),
    );
}

export function formatStory(chars: Character[]): Speech {
    const chain: string[] = [];

    for (let i = 0; i < chars.length - 1; i++) {
        chain.push(`${nom(chars[i + 1])} –∑–∞ ${acc(chars[i])}`);
    }

    chain.reverse();
    return speak(
        [_.upperFirst(chain.join(', ')), chain.join(' - ')],
        [`, –¥–µ–¥–∫–∞ –∑–∞ —Ä–µ–ø–∫—É.`, ' - –¥–µ–¥–∫–∞ –∑–∞ —Ä–µ–ø–∫—É.'],
    );
}

export function success() {
    return speak(
        [
            '–¢—è–Ω—É—Ç-–ø–æ—Ç—è–Ω—É—Ç ‚Äî –≤—ã—Ç—è–Ω—É–ª–∏ —Ä–µ–ø–∫—É!',
            '–¢—è–Ω—É—Ç-–ø–æ—Ç—è–Ω—É—Ç - <speaker audio="alice-sounds-human-kids-1.opus"> - –≤—ã—Ç—è–Ω—É–ª–∏ —Ä–µ–ø–∫—É!',
        ],
        '–ö–∞–∫–∞—è –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Å–∫–∞–∑–∫–∞! –•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É?',
    );
}

export function failure(char: Character) {
    return speak(`–¢—è–Ω—É—Ç-–ø–æ—Ç—è–Ω—É—Ç ‚Äî –≤—ã—Ç—è–Ω—É—Ç—å –Ω–µ –º–æ–≥—É—Ç.`, whoCalled2(char));
}

export const chars = {
    granny(char: Character) {
        const come = comeCapitalized(char);
        return speak(`${come} ${nom(char)}.`);
    },
    mouse(mouse: Character) {
        const come = comeRunningCapitalized(mouse);

        return speak([
            `${come} ${nom(mouse)}.`,
            `${come} ${nom(mouse)} - <speaker audio="alice-music-violin-b-1.opus">.`,
        ]);
    },
    cat(char: Character, previousChar: Character, random100: number) {
        const useSOftMeow = isCharFamela(char) || nom(char).includes('–∫–æ—Ç–µ–Ω');
        const soundNumber = sample(useSOftMeow ? [3, 4] : [1, 2], random100);
        const meow = speak([
            '- –º—è—É -',
            `<speaker audio="alice-sounds-animals-cat-${soundNumber}.opus">`,
        ]);

        const clung = byGender(char, '–≤—Ü–µ–ø–∏–ª—Å—è', '–≤—Ü–µ–ø–∏–ª–∞—Å—å', '–≤—Ü–µ–ø–∏–ª–æ—Å—å');
        const name = nom(char);
        const description = name === '–º—É—Ä–∫–∞' ? '–∫–æ—à–∫–∞ ' : '';

        return speak(
            byGender(char, '–ü—Ä–∏–±–µ–∂–∞–ª', '–ü—Ä–∏–±–µ–∂–∞–ª–∞', '–ü—Ä–∏–±–µ–∂–∞–ª–æ'),
            `${description}${name}`,
            meow,
            `–∏ ${clung} –≤ ${acc(previousChar)}.`,
        );
    },
    dog(dog: Character, _prev, random100: number) {
        const come = comeRunningCapitalized(dog);
        const soundNumber = sample([3, 5], random100);

        return createSpeech(
            `${come} ${nom(dog)}.`,
            `${come} ${nom(dog)} - <speaker audio="alice-sounds-animals-dog-${soundNumber}.opus">.`,
        );
    },
    owl(owl: Character, _prev, random100: number) {
        const come = flownCapitalized(owl);
        const soundNumber = sample([1, 2], random100);

        return createSpeech(
            `${come} ${nom(owl)}.`,
            `${come} ${nom(owl)} - <speaker audio="alice-sounds-animals-owl-${soundNumber}.opus">.`,
        );
    },
    rooster(rooster: Character) {
        const come = flownCapitalized(rooster);

        return createSpeech(
            `${come} ${nom(rooster)}.`,
            `${come} ${nom(rooster)} - <speaker audio="alice-sounds-animals-rooster-1.opus">.`,
        );
    },
    wolf(wolf: Character) {
        const come = comeRunningCapitalized(wolf);

        return createSpeech(
            `${come} ${nom(wolf)}.`,
            `${come} ${nom(wolf)} - <speaker audio="alice-sounds-animals-wolf-1.opus">.`,
        );
    },
    fox(char: Character) {
        const come = comeRunningCapitalized(char);

        return createSpeech(
            `${come} ${nom(char)}.`,
            `${come} ${nom(char)} - <speaker audio="alice-music-violin-c-1.opus">.`,
        );
    },
    bear(char: Character) {
        const come = comeCapitalized(char);
        return createSpeech(`${come} ${nom(char)}.`);
    },
    crow(crow: Character) {
        const come = flownCapitalized(crow);

        return createSpeech(
            `${come} ${nom(crow)}.`,
            `${come} ${nom(crow)} - <speaker audio="alice-sounds-animals-crow-1.opus">.`,
        );
    },
    lion(lion: Character) {
        const come = comeCapitalized(lion);

        return createSpeech(
            `${come} ${nom(lion)}.`,
            `${come} ${nom(lion)} - <speaker audio="alice-sounds-animals-lion-1.opus">.`,
        );
    },
    cow(cow: Character) {
        const come = comeCapitalized(cow);

        return createSpeech(
            `${come} ${nom(cow)}.`,
            `${come} ${nom(cow)} - <speaker audio="alice-sounds-animals-cow-2.opus">.`,
        );
    },
    horse(horse: Character, _prev, random100: number) {
        const come = riddenCapitalized(horse);
        const soundNumber = (random100 % 2) + 1;

        return createSpeech(
            `${come} ${nom(horse)}.`,
            `${come} ${nom(
                horse,
            )} - <speaker audio="alice-sounds-animals-horse-${soundNumber}.opus">.`,
        );
    },
    chicken(chicken: Character) {
        const come = comeRunningCapitalized(chicken);

        return createSpeech(
            `${come} ${nom(chicken)}.`,
            `${come} ${nom(chicken)} - <speaker audio="alice-sounds-animals-chicken-1.opus">.`,
        );
    },
    frog(frog: Character) {
        const come = riddenCapitalized(frog);

        return createSpeech(
            `${come} ${nom(frog)}.`,
            `${come} ${nom(frog)} - <speaker audio="alice-sounds-animals-frog-1.opus">.`,
        );
    },
    elephant(char: Character, _previousChar: Character, random100: number): Speech {
        const come = comeCapitalized(char);
        const n = sample([1, 2], random100);

        return createSpeech(
            `${come} ${nom(char)}.`,
            `${come} ${nom(char)} - <speaker audio="alice-sounds-animals-elephant-${n}.opus">.`,
        );
    },
    fish(char: Character, previousChar: Character) {
        const nemu = byGender(previousChar, '–Ω–µ–º—É', '–Ω–µ–π', '–Ω–µ–º—É');
        const poshel = byGender(previousChar, '–ü–æ—à—ë–ª', '–ü–æ—à–ª–∞', '–ü–æ—à–ª–æ');
        const stalOn = byGender(previousChar, '—Å—Ç–∞–ª –æ–Ω', '—Å—Ç–∞–ª–∞ –æ–Ω–∞', '—Å—Ç–∞–ª–æ –æ–Ω–æ');

        return speak(
            `${poshel} ${nom(previousChar)} –∫ —Å–∏–Ω–µ–º—É –º–æ—Ä—é;`,
            createSpeech('', '<speaker audio="alice-sounds-nature-sea-1.opus"> - - '),
            `${stalOn} –∫–ª–∏–∫–∞—Ç—å ${acc(char)}, –ø—Ä–∏–ø–ª—ã–ª–∞ –∫ ${nemu} —Ä—ã–±–∫–∞, —Å–ø—Ä–æ—Å–∏–ª–∞:`,
            `¬´–ß–µ–≥–æ —Ç–µ–±–µ –Ω–∞–¥–æ–±–Ω–æ ${nom(previousChar)}?¬ª`,
            `–ï–π —Å –ø–æ–∫–ª–æ–Ω–æ–º ${nom(previousChar)} –æ—Ç–≤–µ—á–∞–µ—Ç:`,
            `¬´–°–º–∏–ª—É–π—Å—è, –≥–æ—Å—É–¥–∞—Ä—ã–Ω—è —Ä—ã–±–∫–∞, –ø–æ–º–æ–≥–∏ –≤—ã—Ç—è–Ω—É—Ç—å —Ä–µ–ø–∫—É.¬ª`,
        );
    },
    girl(char: Character) {
        const come = comeRunningCapitalized(char);

        return createSpeech(
            `${come} ${nom(char)}.`,
            `${come} ${nom(char)} - <speaker audio="alice-sounds-human-laugh-5.opus">.`,
        );
    },
};

function called(char: Character) {
    return byGender(char, '–ø–æ–∑–≤–∞–ª', '–ø–æ–∑–≤–∞–ª–∞', '–ø–æ–∑–≤–∞–ª–æ');
}

function byGender<T>(char: Character, male: T, famela: T, other: T) {
    if (isCharMale(char) || isCharUnisex(char)) {
        return male;
    }

    return isCharFamela(char) ? famela : other;
}

export function nom(char: Character) {
    return char.subject.nominative;
}

export function acc(char: Character) {
    return char.subject.accusative;
}

export function norm(char: Character) {
    return char.normal;
}

function comeRunningCapitalized(char: Character) {
    return byGender(char, '–ü—Ä–∏–±–µ–∂–∞–ª', '–ü—Ä–∏–±–µ–∂–∞–ª–∞', '–ü—Ä–∏–±–µ–∂–∞–ª–æ');
}

function comeCapitalized(char: Character) {
    return byGender(char, '–ü—Ä–∏—à—ë–ª', '–ü—Ä–∏—à–ª–∞', '–ü—Ä–∏—à–ª–æ');
}

function riddenCapitalized(char: Character) {
    return byGender(char, '–ü—Ä–∏—Å–∫–∞–∫–∞–ª', '–ü—Ä–∏—Å–∫–∞–∫–∞–ª–∞', '–ü—Ä–∏—Å–∫–∞–∫–∞–ª–æ');
}

function flownCapitalized(char: Character) {
    return byGender(char, '–ü—Ä–∏–ª–µ—Ç–µ–ª', '–ü—Ä–∏–ª–µ—Ç–µ–ª–∞', '–ü—Ä–∏–ª–µ—Ç–µ–ª–æ');
}
