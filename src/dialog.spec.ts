import { mainDialog } from './dialog';
import { stemmer } from './stemmer';
import { Session } from './Session';

describe('Main dialog', () => {
    test('–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è —Å–∫–∞–∑–∫–∞: –Ω–∞—á–∞–ª–æ', async () => {
        expect(await act('')).toMatch('–æ—Å–∞–¥–∏–ª –¥–µ–¥ —Ä–µ–ø–∫—É');
    });

    test('–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è —Å–∫–∞–∑–∫–∞: –∏—Å—Ç–æ—Ä–∏—è', async () => {
        await act('');
        await act('–ë–∞–±–∫—É');
        await act('–í–Ω—É—á–∫—É');
        await act('–ñ—É—á–∫—É');
        const story = await act('–ö–æ—à–∫—É');

        expect(story).toMatch('–ö–æ—à–∫–∞ üê± –∑–∞ –∂—É—á–∫—É, –∂—É—á–∫–∞ üê∂ –∑–∞ –≤–Ω—É—á–∫—É, –≤–Ω—É—á–∫–∞ üëß –∑–∞ –±–∞–±–∫—É,');
        expect(story).toMatch(
            '–±–∞–±–∫–∞ üëµ –∑–∞ –¥–µ–¥–∫—É, –¥–µ–¥–∫–∞ üë¥ –∑–∞ —Ä–µ–ø–∫—É. –¢—è–Ω—É—Ç-–ø–æ—Ç—è–Ω—É—Ç ‚Äî –≤—ã—Ç—è–Ω—É—Ç—å –Ω–µ –º–æ–≥—É—Ç.',
        );
    });

    test('–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è —Å–∫–∞–∑–∫–∞: –∫–æ–Ω–µ—Ü [–ø–æ–∑–≤–∞–ª–∏ –º—ã—à–∫—É]', async () => {
        await act('');
        await act('–ë–∞–±–∫—É');
        const story = await act('–ú—ã—à–∫—É');

        expect(story).toMatch(
            '–ú—ã—à–∫–∞ üê≠ –∑–∞ –±–∞–±–∫—É, –±–∞–±–∫–∞ üëµ –∑–∞ –¥–µ–¥–∫—É, –¥–µ–¥–∫–∞ üë¥ –∑–∞ —Ä–µ–ø–∫—É. –¢—è–Ω—É—Ç-–ø–æ—Ç—è–Ω—É—Ç üéâ –≤—ã—Ç—è–Ω—É–ª–∏ —Ä–µ–ø–∫—É!',
        );
    });

    test('–ú—É–∂—Å–∫–æ–π —Ä–æ–¥ –∑–æ–≤–µ—Ç –Ω–∞ –ø–æ–º–æ—â—å', async () => {
        await act('');
        expect(await act('–î—Ä–∞–∫–æ–Ω–∞')).toMatch('–ö–æ–≥–æ –ø–æ–∑–≤–∞–ª –¥—Ä–∞–∫–æ–Ω');
    });

    test('–ñ–µ–Ω—Å–∫–∏–π —Ä–æ–¥ –∑–æ–≤–µ—Ç –Ω–∞ –ø–æ–º–æ—â—å', async () => {
        await act('');
        expect(await act('–ë–∞–±–∫—É')).toMatch('–ö–æ–≥–æ –ø–æ–∑–≤–∞–ª–∞ –±–∞–±–∫–∞');
    });

    test('–°—Ä–µ–¥–Ω–∏–π —Ä–æ–¥ –∑–æ–≤–µ—Ç –Ω–∞ –ø–æ–º–æ—â—å', async () => {
        await act('');
        expect(await act('–ß—É–¥–∏—â–µ')).toMatch('–ö–æ–≥–æ –ø–æ–∑–≤–∞–ª–æ —á—É–¥–∏—â–µ');
    });

    test('–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–ª—å–∫–æ –≥–µ—Ä–æ—è –≤ —Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ', async () => {
        await act('');
        expect(await act('–ë—É—Ç—ã–ª–∫–∞ —Å—Ç–æ–ª–∞ –¥—Ä–∞–∫–æ–Ω–∞')).toMatch('–î—Ä–∞–∫–æ–Ω üêâ –∑–∞ –¥–µ–¥–∫—É');
    });

    test('–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –æ–¥—É—à–µ–≤–ª–µ–Ω–Ω—ã–º', async () => {
        await act('');
        expect(await act('–°–µ—Ä—ë–∂–∫—É')).toMatch('–ö–æ–≥–æ –ø–æ–∑–≤–∞–ª —Å–µ—Ä–µ–∂–∫–∞');
    });

    test('–ü—Ä–∞–≤–∏–ª—å–Ω–æ —Å–∫–ª–æ–Ω—è–µ—Ç —Ñ—Ä–∞–∑—É –ø–µ—Ä–µ—Å–ø—Ä–∞—à–∏–≤–∞–Ω–∏—è –≥–µ—Ä–æ—è', async () => {
        await act('');
        await act('–≤–Ω—É–∫–∞');
        expect(await act('—Ä–∞–∫–µ—Ç–∞')).toMatch('–ö–æ–≥–æ –ø–æ–∑–≤–∞–ª –≤–Ω—É–∫');

        await act('–ë–∞–±–∫—É');
        expect(await act('—Ä–∞–∫–µ—Ç–∞')).toMatch('–ö–æ–≥–æ –ø–æ–∑–≤–∞–ª–∞ –±–∞–±–∫–∞');

        await act('—á—É–¥–∏—â–µ');
        expect(await act('—Ä–∞–∫–µ—Ç–∞')).toMatch('–ö–æ–≥–æ –ø–æ–∑–≤–∞–ª–æ —á—É–¥–∏—â–µ');
    });

    test('–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ', async () => {
        await act('');
        expect(await act('—á–µ–ª–æ–≤–µ–∫')).toMatch('–ß–µ–ª–æ–≤–µ–∫ –∑–∞ –¥–µ–¥–∫—É');
        expect(await act('–±–æ–≥–∞—Ç—ã—Ä—å')).toMatch('–ë–æ–≥–∞—Ç—ã—Ä—å –∑–∞ —á–µ–ª–æ–≤–µ–∫–∞');
        expect(await act('–í–Ω—É—á–æ–∫')).toMatch('–í–Ω—É—á–æ–∫ –∑–∞ –±–æ–≥–∞—Ç—ã—Ä—è');
        expect(await act('–¶–∞—Ä–∏—Ü–∞')).toMatch('–¶–∞—Ä–∏—Ü–∞ –∑–∞ –≤–Ω—É—á–∫–∞');
        expect(await act('–õ–µ–±–µ–¥—å')).toMatch('–õ–µ–±–µ–¥—å ü¶¢ –∑–∞ —Ü–∞—Ä–∏—Ü—É');
        // TODO –õ–µ–±–µ–¥—å —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç—Å—è –∫–∞–∫ —Ñ–∞–º–∏–ª–∏—è –∂–µ–Ω. –≤ –≤–∏–Ω. –ø–∞–¥–µ–∂–µ
        // expect(await act('–í—Ä–∞—á')).toMatch('–í—Ä–∞—á –∑–∞ –ª–µ–±–µ–¥—è');
    });

    test('–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤–∏–Ω. –ø–∞–¥–µ–∂—É', async () => {
        /**
         * –≤–Ω—É—á–∫+–∞, –∞ –Ω–µ –≤–Ω+—É—á–∫–∞
         * –ù–∞–ø—Ä–∏–º–µ—Ä –¥–µ–¥ –ø–æ–∑–≤–∞–ª –≤–Ω—É—á–∫–∞
         */
        await act('');
        expect(await act('–í–Ω—É—á–∫–∞')).toMatch('–í–Ω—É—á–æ–∫ –∑–∞ –¥–µ–¥–∫—É');
    });

    test('–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ñ—Ä–∞–∑–∞ –¥–ª—è —Ä—ã–±–∫–∏', async () => {
        await act('');
        expect(await tts('–∑–æ–ª–æ—Ç—É—é —Ä—ã–±–∫—É')).toMatch(
            /–∫–ª–∏–∫–∞—Ç—å –∑–æ–ª–æ—Ç—É—é —Ä—ã–±–∫—É.*–ø—Ä–∏–ø–ª—ã–ª–∞ –∫ –Ω–µ–º—É —Ä—ã–±–∫–∞, —Å–ø—Ä–æ—Å–∏–ª–∞/,
        );

        await act('–∫–æ—à–∫—É');
        expect(await act('—Ä—ã–±–∫—É')).toMatch('—Å—Ç–∞–ª–∞ –æ–Ω–∞ –∫–ª–∏–∫–∞—Ç—å');
    });

    test('–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ñ—Ä–∞–∑–∞ –¥–ª—è –∫–æ—à–µ–∫', async () => {
        await act('');
        expect(await tts('—á–µ—Ä–Ω—É—é –∫–æ—à–∫—É')).toMatch(/–ü—Ä–∏–±–µ–∂–∞–ª–∞ —á–µ—Ä–Ω–∞—è –∫–æ—à–∫–∞.*–≤—Ü–µ–ø–∏–ª–∞—Å—å –≤ –¥–µ–¥–∫—É/);
        expect(await tts('–∫–æ—Ç –º–∞—Ä—Ç–æ—Å–∫–∏–Ω')).toMatch(/–ü—Ä–∏–±–µ–∂–∞–ª –∫–æ—Ç.*–≤—Ü–µ–ø–∏–ª—Å—è –≤/);
    });

    test('–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ñ—Ä–∞–∑–∞ –¥–ª—è –º—É—Ä–∫–∏', async () => {
        await act('');
        expect(await tts('–º—É—Ä–∫—É')).toMatch(/–ü—Ä–∏–±–µ–∂–∞–ª–∞ –∫–æ—à–∫–∞ –º—É—Ä–∫–∞/);
    });

    test('–û—Ç–±—Ä–∞—Å—ã–≤–∞–µ—Ç –Ω–µ–æ–¥—É—à–µ–≤–ª–µ–Ω–Ω–æ–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π —Ñ—Ä–∞–∑–æ–π', async () => {
        await act('');
        expect(await act('–ª–æ–ø–∞—Ç—É')).toMatch(/–∑–≤–∞–ª –¥–µ–¥–∫–∞ –ª–æ–ø–∞—Ç—É.*–Ω–µ –¥–æ–∑–≤–∞–ª—Å—è/);
        expect(await act('–≤–µ–¥—Ä–æ')).toMatch(/–∑–≤–∞–ª –¥–µ–¥–∫–∞ –≤–µ–¥—Ä–æ.*–Ω–µ –¥–æ–∑–≤–∞–ª—Å—è/);
        expect(await act('—á–∞–π–Ω–∏–∫')).toMatch(/–∑–≤–∞–ª –¥–µ–¥–∫–∞ —á–∞–π–Ω–∏–∫.*–Ω–µ –¥–æ–∑–≤–∞–ª—Å—è/);
        expect(await act('–æ–∫–Ω–æ')).toMatch(/–∑–≤–∞–ª –¥–µ–¥–∫–∞ –æ–∫–Ω–æ.*–Ω–µ –¥–æ–∑–≤–∞–ª—Å—è/);
    });

    test('—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å / –ø–æ–º–æ—â—å', async () => {
        await act('');
        expect(await act('—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å')).toMatch('–≤–º–µ—Å—Ç–µ —Å–æ—á–∏–Ω–∏–º —Å–∫–∞–∑–∫—É');
        await act('–∫–æ—à–∫—É');
        expect(await act('–ø–æ–º–æ—â—å')).toMatch(/–≤–º–µ—Å—Ç–µ —Å–æ—á–∏–Ω–∏–º —Å–∫–∞–∑–∫—É.*–∫–æ—à–∫–∞/i);
    });

    test('–ü–æ–≤—Ç–æ—Ä –∏—Å—Ç–æ—Ä–∏–∏: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', async () => {
        await act('');
        expect(await act('–º—ã—à–∫—É')).toMatch('–≤—ã—Ç—è–Ω—É–ª–∏ —Ä–µ–ø–∫—É');
        expect(await act('–¥–∞–≤–∞–π –µ—â–µ —Ä–∞–∑')).toMatch('–æ—Å–∞–¥–∏–ª –¥–µ–¥ —Ä–µ–ø–∫—É');

        expect(await act('–º—ã—à–∫—É')).toMatch('–≤—ã—Ç—è–Ω—É–ª–∏ —Ä–µ–ø–∫—É');
        expect(await act('–¥–∞ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞')).toMatch('–ü–æ—Å–∞–¥–∏–ª –¥–µ–¥ —Ä–µ–ø–∫—É');
    });

    test('–û—Ç–∫–∞–∑ –æ—Ç –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Å–ª–æ–≤–æ–º –ù–µ –Ω–∞–¥–æ', async () => {
        await act('');
        // FIXME: –ï—Å–ª–∏ —É–±—Ä–∞—Ç—å await, —Ç–µ—Å—Ç —É–ø–∞–¥–µ—Ç. –ü–æ–Ω—è—Ç—å, –ø–æ—á–µ–º—É.
        await act('–º—ã—à–∫—É');
        expect(await act('–±–æ–ª—å—à–µ –Ω–µ –Ω–∞–¥–æ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞')).toMatch('–∫–æ–Ω–µ—Ü');
    });

    test('–ü–æ–∑–≤–∞–ª–∏ –ª–æ—à–∞–¥—å (—Ä–µ–≥—Ä–µ—Å—Å–∏—è)', async () => {
        await act('');
        expect(await act('–ª–æ—à–∞–¥—å')).toMatch('–õ–æ—à–∞–¥—å üê¥ –∑–∞ –¥–µ–¥–∫—É');
        expect(await act('–ª–æ—à–∞–¥—å')).toMatch('–õ–æ—à–∞–¥—å üê¥ –∑–∞ –ª–æ—à–∞–¥—å');
    });

    test('–î–ª—è –∏–º–µ–Ω –Ω–µ–æ–ø—Ä–µ–¥. —Ä–æ–¥–∞ –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –º—É–∂—Å–∫–æ–π', async () => {
        await act('');
        expect(await act('—Å–∞—à—É')).toMatch('–ö–æ–≥–æ –ø–æ–∑–≤–∞–ª —Å–∞—à–∞');
    });

    test('–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∏–º—è-—Ñ–∞–º–∏–ª–∏—é', async () => {
        await act('');
        expect(await act('–∞–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –∫–∞—Ä–ø–æ–≤–∞')).toMatch(/–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ö–∞—Ä–ø–æ–≤ –∑–∞ –¥–µ–¥–∫—É,/i);
        expect(await act('–∏—Ä–∏–Ω–∞ –∫–∞—Ä–ø–æ–≤–∞')).toMatch(/–ò—Ä–∏–Ω–∞ –ö–∞—Ä–ø–æ–≤–∞ –∑–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ö–∞—Ä–ø–æ–≤–∞,/i);
        expect(await act('–≤–ª–∞–¥–∏–º–∏—Ä –ø—É—Ç–∏–Ω')).toMatch(/–í–ª–∞–¥–∏–º–∏—Ä –ü—É—Ç–∏–Ω –∑–∞ –ò—Ä–∏–Ω—É –ö–∞—Ä–ø–æ–≤—É,/i);
        expect(await act('–≥–∞—Ä—Ä–∏ –ø–æ—Ç—Ç–µ—Ä')).toMatch(/–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä –∑–∞ –í–ª–∞–¥–∏–º–∏—Ä–∞ –ü—É—Ç–∏–Ω–∞,/i);
        expect(await act('—Ñ—ë–¥–æ—Ä –µ–º–µ–ª—å—è–Ω–µ–Ω–∫–æ')).toMatch(/–§–µ–¥–æ—Ä –ï–º–µ–ª—å—è–Ω–µ–Ω–∫–æ –∑–∞ –ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä–∞,/i);
        expect(await act('–∞–ª–ª—É –ø—É–≥–∞—á—ë–≤—É')).toMatch(/–ê–ª–ª–∞ –ü—É–≥–∞—á–µ–≤–∞ –∑–∞ –§–µ–¥–æ—Ä–∞ –ï–º–µ–ª—å—è–Ω–µ–Ω–∫–æ,/i);
    });

    test('–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω–æ–µ-—Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ', async () => {
        await act('');
        expect(await act('–∂–µ–ª–µ–∑–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞')).toMatch('–ñ–µ–ª–µ–∑–Ω—ã–π —á–µ–ª–æ–≤–µ–∫ –∑–∞ –¥–µ–¥–∫—É');
        expect(await act('–º–∞–ª–µ–Ω—å–∫—É—é –∫–æ—à–µ—á–∫—É')).toMatch(
            '–ú–∞–ª–µ–Ω—å–∫–∞—è –∫–æ—à–µ—á–∫–∞ üê± –∑–∞ –∂–µ–ª–µ–∑–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞,',
        );
        expect(await act('—á–µ—Ä–Ω—É—é –∫–æ—à–∫—É')).toMatch('–ß–µ—Ä–Ω–∞—è –∫–æ—à–∫–∞ üê± –∑–∞ –º–∞–ª–µ–Ω—å–∫—É—é –∫–æ—à–µ—á–∫—É,');
        expect(await act('–ª–µ—Ç–Ω–∏–π –∑–∞–π—á–∏–∫')).toMatch('–õ–µ—Ç–Ω–∏–π –∑–∞–π—á–∏–∫ üê∞ –∑–∞ —á–µ—Ä–Ω—É—é –∫–æ—à–∫—É,');
        expect(await act('–ª–µ—Ç–Ω—é—é –ø—á–µ–ª–∫—É')).toMatch('–õ–µ—Ç–Ω—è—è –ø—á–µ–ª–∫–∞ üêù –∑–∞ –ª–µ—Ç–Ω–µ–≥–æ –∑–∞–π—á–∏–∫–∞,');
        expect(await act('–∑–≤–µ—Ä—è')).toMatch('–ó–≤–µ—Ä—å –∑–∞ –ª–µ—Ç–Ω—é—é –ø—á–µ–ª–∫—É,');
    });

    test('–õ—é–±–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤–∏–Ω. –ø–∞–¥–µ–∂–∞ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç –ò–º–µ–Ω–∏-–§–∞–º–∏–ª–∏–∏ –∏–º. –ø–∞–¥–µ–∂–∞', async () => {
        await tts('');
        expect(await tts('–ø–æ–∑–≤–∞–ª –í–∞—Å—è –ü—É–ø–∫–∏–Ω –∫–æ—Ç–∏–∫–∞')).toMatch(/–∫–æ—Ç–∏–∫ –∑–∞ –¥–µ–¥–∫—É/i);
    });

    test('–†–∞—Å–ø–æ–∑–Ω–∞–µ—Ç –ò–º—è-–§–∞–º–∏–ª–∏—è –∫–æ–≥–¥–∞ –∏–º—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª–∞', async () => {
        await act('');
        expect(await act('–°–∞—à–∞ –ö–∞—Ä–ø–æ–≤')).toMatch(/–°–∞—à–∞ –ö–∞—Ä–ø–æ–≤ –∑–∞ –¥–µ–¥–∫—É/i);
    });

    test('–û—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞ –≤ –≤–∏–Ω. –ø–∞–¥–µ–∂–µ.', async () => {
        await act('');
        expect(await act('–ø—Å–∞')).toMatch('–ü–µ—Å –∑–∞ –¥–µ–¥–∫—É');
        expect(await act('–ª—å–≤–∞')).toMatch('–õ–µ–≤ ü¶Å –∑–∞ –ø—Å–∞');
        expect(await act('–∫–æ—Ç–∏–∫–∞')).toMatch('–ö–æ—Ç–∏–∫ üê± –∑–∞ –ª—å–≤–∞');

        expect(await act('–ø–µ—Å')).toMatch('–ü–µ—Å –∑–∞ –∫–æ—Ç–∏–∫–∞');
        expect(await act('–ª–µ–≤')).toMatch('–õ–µ–≤ ü¶Å –∑–∞ –ø—Å–∞');
        expect(await act('–∫–æ—Ç–∏–∫')).toMatch('–ö–æ—Ç–∏–∫ üê± –∑–∞ –ª—å–≤–∞');
    });

    test('–ü–æ–≤—Ç–æ—Ä –∏—Å—Ç–æ—Ä–∏–∏: –æ—Ç–∫–∞–∑', async () => {
        await act('');
        expect(await act('–º—ã—à–∫—É')).toMatch('–≤—ã—Ç—è–Ω—É–ª–∏ —Ä–µ–ø–∫—É');
        const {
            speech: { text },
            endSession,
        } = await mainDialog('–Ω–µ—Ç —Å–ø–∞—Å–∏–±–æ', session, { stemmer, random100: 0 });

        expect(text).toMatch('–∫–æ–Ω–µ—Ü');
        expect(endSession).toEqual(true);
    });

    test('–°–ø–µ—Ü—Ñ—Ä–∞–∑–∞ –¥–ª—è –∂—É—á–∫–∏', async () => {
        await act('');
        expect(await act('–∂—É—á–∫—É')).toMatch(/^–ü—Ä–∏–±–µ–∂–∞–ª–∞ –∂—É—á–∫–∞\. –ñ—É—á–∫–∞ üê∂ –∑–∞ –¥–µ–¥–∫—É/);
    });

    test('–ü–æ–∑–≤–∞–ª–∏ –±—É—Ä–∞—Ç–∏–Ω–æ, –ø–∏–Ω–æ–∫–∫–∏–æ', async () => {
        await act('');
        expect(await act('–±—É—Ä–∞—Ç–∏–Ω–æ')).toMatch('–ë—É—Ä–∞—Ç–∏–Ω–æ –∑–∞ –¥–µ–¥–∫—É');
        expect(await act('–ø–∏–Ω–æ–∫–∫–∏–æ')).toMatch('–ü–∏–Ω–æ–∫–∫–∏–æ –∑–∞ –±—É—Ä–∞—Ç–∏–Ω–æ,');
        expect(await act('–∫–æ—Ç–∏–∫')).toMatch('–ö–æ—Ç–∏–∫ üê± –∑–∞ –ø–∏–Ω–æ–∫–∫–∏–æ,');
    });

    test('–†–∞—Å–ø–æ–∑–Ω–∞–µ—Ç –º–Ω–æ–∂. —á–∏—Å–ª–æ –∫–∞–∫ –µ–¥.', async () => {
        await act('');
        expect(await act('–∫–æ—à–µ–∫')).toMatch('–ö–æ—à–∫–∞ üê± –∑–∞ –¥–µ–¥–∫—É');
        expect(await act('–∫–æ—Ç—è—Ç–∞')).toMatch('–ö–æ—Ç–µ–Ω–æ–∫ üê± –∑–∞ –∫–æ—à–∫—É');
    });

    test('–ü–æ–∑–≤–∞–ª–∏ –æ—Å–ª–∞', async () => {
        await act('');
        expect(await act('–æ—Å–ª–∞')).toMatch('–û—Å–µ–ª –∑–∞ –¥–µ–¥–∫—É');
        expect(await act('–∫–æ—Ç–∏–∫–∞')).toMatch('–ö–æ—Ç–∏–∫ üê± –∑–∞ –æ—Å–ª–∞,');
    });

    test('–ü–æ–∑–≤–∞–ª–∏ –≥–æ–Ω—Ü–∞', async () => {
        await act('');
        expect(await act('–≥–æ–Ω—Ü–∞')).toMatch('–ì–æ–Ω–µ—Ü –∑–∞ –¥–µ–¥–∫—É');
        expect(await act('–∫–æ—Ç–∏–∫–∞')).toMatch('–ö–æ—Ç–∏–∫ üê± –∑–∞ –≥–æ–Ω—Ü–∞,');
    });

    test('–ß—ë—Ä–Ω—ã–π –≤–æ—Ä–æ–Ω –Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ –≤–æ—Ä–æ–Ω—É', async () => {
        await act('');
        expect(await tts('—á—ë—Ä–Ω–æ–≥–æ –≤–æ—Ä–æ–Ω–∞')).toMatch(/–ü—Ä–∏–ª–µ—Ç–µ–ª —á–µ—Ä–Ω—ã–π –≤–æ—Ä–æ–Ω .*—á–µ—Ä–Ω—ã–π –≤–æ—Ä–æ–Ω –∑–∞/i);
        expect(await tts('—á—ë—Ä–Ω—ã–π –≤–æ—Ä–æ–Ω')).toMatch(/–ü—Ä–∏–ª–µ—Ç–µ–ª —á–µ—Ä–Ω—ã–π –≤–æ—Ä–æ–Ω .*—á–µ—Ä–Ω—ã–π –≤–æ—Ä–æ–Ω –∑–∞/i);
    });

    test('–ù–µ —Å–∫–ª–æ–Ω—è–µ—Ç –Ω–µ–æ–¥. —Å—É—â–Ω–æ—Å—Ç–∏', async () => {
        await act('');
        expect(await tts('–∑–∞–º–æ–∫')).toMatch(/–∑–≤–∞–ª –¥–µ–¥–∫–∞ –∑–∞–º–æ–∫/i);
    });

    test('–ü—Ä–∞–≤–∏–ª—å–Ω–æ —Å–∫–ª–æ–Ω—è–µ—Ç –º–∏–ª—ã—Ö –∫–æ–Ω–µ–π', async () => {
        await act('');
        expect(await act('–º–∏–ª—ã–µ –∫–æ–Ω–∏')).toMatch(/–º–∏–ª—ã–π –∫–æ–Ω—å üê¥ –∑–∞ –¥–µ–¥–∫—É/i);
        expect(await act('–º–∏–ª—ã–µ –∫–æ–Ω–∏')).toMatch(/–º–∏–ª—ã–π –∫–æ–Ω—å üê¥ –∑–∞ –º–∏–ª–æ–≥–æ –∫–æ–Ω—è/i);
    });

    test('–í –∫–æ–Ω—Ü–µ –∫–æ–Ω—Ü–æ–≤ —Ä–∞—Å–ø–æ–∑–¥–∞–≤–∞—Ç—å —Å—É—â. –≤ –ª—é–±–æ–º –ø–∞–¥–µ–∂–µ', async () => {
        await act('');
        expect(await tts('–º–∞–ª—å—á–∏–∫—É')).toMatch(/–º–∞–ª—å—á–∏–∫ –∑–∞ –¥–µ–¥–∫—É/i);
    });

    test('–ß–µ—Ä–Ω–∏–ª–∞ - –Ω–µ–æ–¥—É—â–µ–≤–ª–µ–Ω–Ω–∞—è —Å—É—â–Ω–æ—Å—Ç—å', async () => {
        await act('');
        expect(await tts('—á–µ—Ä–Ω–∏–ª–∞')).toMatch(/–∑–≤–∞–ª –¥–µ–¥–∫–∞ —á–µ—Ä–Ω–∏–ª–∞/i);
    });

    test('–ü—Ä–∞–≤–∏–ª—å–Ω–æ —Å–∫–ª–æ–Ω—è–µ—Ç –ß—ë—Ä–Ω–æ–≥–æ', async () => {
        await act('');
        expect(await act('—á–µ—Ä–Ω—ã–π')).toMatch(/—á–µ—Ä–Ω—ã–π –∑–∞ –¥–µ–¥–∫—É/i);
        expect(await act('—á–µ—Ä–Ω—ã–π')).toMatch(/—á–µ—Ä–Ω—ã–π –∑–∞ —á–µ—Ä–Ω–æ–≥–æ/i);
    });

    test('–†–∞—Å–ø–æ–∑–Ω–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ –¥–≤—É–∫ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö', async () => {
        await act('');
        expect(await act('–±–∞–±—É —è–≥—É')).toMatch(/–±–∞–±–∞ —è–≥–∞ üßô‚Äç –∑–∞ –¥–µ–¥–∫—É/i);
        expect(await act('–¥–µ–¥–∞ –º–æ—Ä–æ–∑–∞')).toMatch(/–¥–µ–¥ –º–æ—Ä–æ–∑ üéÖ –∑–∞ –±–∞–±—É —è–≥—É/i);
        expect(await act('—á–µ–ª–æ–≤–µ–∫–∞ –ø–∞—É–∫–∞')).toMatch(/—á–µ–ª–æ–≤–µ–∫ –ø–∞—É–∫ –∑–∞ –¥–µ–¥–∞ –º–æ—Ä–æ–∑–∞/i);
        expect(await act('–∫–∞–ø–∏—Ç–∞–Ω –∞–º–µ—Ä–∏–∫–∞')).toMatch(/–∫–∞–ø–∏—Ç–∞–Ω –∞–º–µ—Ä–∏–∫–∞ –∑–∞ —á–µ–ª–æ–≤–µ–∫–∞ –ø–∞—É–∫–∞/i);

        expect(await act('–¥–µ–¥ –±–∞–±—É')).toMatch(/–±–∞–±–∞ üëµ –∑–∞ –∫–∞–ø–∏—Ç–∞–Ω–∞ –∞–º–µ—Ä–∏–∫—É/i);
        expect(await act('–±–∞–±–∞ –¥–µ–¥–∞ –¥—É–¥–∫–∞')).toMatch(/–¥–µ–¥ üë¥ –∑–∞ –±–∞–±—É/i);
        expect(await act('—Ö–æ–ª–æ–¥ —Å—Ç—É–ª')).toMatch(/–¥–æ–ª–≥–æ –∑–≤–∞–ª –¥–µ–¥ —Ö–æ–ª–æ–¥/i);
    });

    test('–ù–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–∑ —Ä–∞–∑–Ω–æ–≥–æ –ø–æ–ª–∞', async () => {
        await act('');
        expect(await act('–°–æ–±–∞–∫–∞ –∫—Ä–∞—Å–Ω—ã–π')).toMatch(/—Å–æ–±–∞–∫–∞ üê∂ –∑–∞ –¥–µ–¥–∫—É/i);
    });

    test('–û—Ç–±—Ä–∞—Å—ã–≤–∞–µ—Ç –°', async () => {
        await act('');
        expect(await act('–î—É—Ä–∞—á–∫–∞ —Å –ø–µ—Ä–µ—É–ª–æ—á–∫–∞')).toMatch(/–¥—É—Ä–∞—á–æ–∫ –∑–∞ –¥–µ–¥–∫—É/i);
    });

    test('–û—Ç–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞ (—Ç–∞–∫–æ–µ —Å–ª—É—á–∞–π–Ω–æ –±—ã–≤–∞–µ—Ç)', async () => {
        await act('');
        expect(await act('–ß–µ–±—É—Ä–∞—à–∫—É —á–µ–±—É—Ä–∞—à–∫—É')).toMatch(/^–ß–µ–±—É—Ä–∞—à–∫–∞ –∑–∞ –¥–µ–¥–∫—É/i);
    });

    test('–†–∞—Å–ø–æ–∑–Ω–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –î–∞ –∏ –ù–µ—Ç –Ω–µ —á—É—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É', async () => {
        await act('');
        await act('–ú—ã—à–∫—É');
        expect(await act('–î–∞')).toMatch(/–ø–æ—Å–∞–¥–∏–ª –¥–µ–¥ —Ä–µ–ø–∫—É/i);
    });

    test('–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –ó–∞ –∑–∞–π—Ü–µ–º (—Ä–µ–≥—Ä–µ—Å—Å–∏—è)', async () => {
        await act('');
        expect(await tts('–∑–∞ –∑–∞–π—Ü–µ–º')).toMatch(/–∑–∞—è—Ü –∑–∞ –¥–µ–¥–∫—É/i);
    });

    test('–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–π', async () => {
        let tale = await tts('');

        while (tale.length < 1024 && !/–≤—ã—Ç—è–Ω—É–ª–∏ —Ä–µ–ø–∫—É/i.test(tale)) {
            tale = await tts('–º–∞–ª–µ–Ω—å–∫–æ–≥–æ –∫–æ–Ω–µ–Ω–∫–∞');
        }

        expect(tale).toMatch(/–≤—ã—Ç—è–Ω—É–ª–∏ —Ä–µ–ø–∫—É/i);
    });

    test('–ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç —ç–º–æ–¥–∂–∏ –≤ –∫–æ–º–∞–Ω–¥–µ', async () => {
        await tts('');
        expect(await tts('üê∫ –°–µ—Ä–æ–≥–æ –≤–æ–ª–∫–∞')).toMatch(/—Å–µ—Ä—ã–π –≤–æ–ª–∫/i);
    });

    test('–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏', async () => {
        await act('');
        expect(await act('–ø–æ–∑–≤–∞–ª —Å—É—á–∫—É')).toMatch(/–∂—É—á–∫–∞ üê∂ –∑–∞ –¥–µ–¥–∫—É/i);
        expect(await act('–ø–æ–∑–≤–∞–ª –±–∞–∫—É')).toMatch(/–±–∞–±–∫–∞ üëµ –∑–∞ –∂—É—á–∫—É/i);
        expect(await act('–ø–æ–∑–≤–∞–ª –∂—É—á–∫–∞')).toMatch(/–∂—É—á–∫–∞ üê∂ –∑–∞ –±–∞–±–∫—É/i);
        expect(await act('–ø–æ–∑–≤–∞–ª —Ä—É—á–∫—É')).toMatch(/–∂—É—á–∫–∞ üê∂ –∑–∞ –∂—É—á–∫—É/i);
        expect(await act('–ø–æ–∑–≤–∞–ª –Ω–æ—á–∫—É')).toMatch(/–¥–æ—á–∫–∞ üßí –∑–∞ –∂—É—á–∫—É/i);
    });

    test('–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞—ë—Ç —Å–ª–æ–≤–æ ¬´–Ω–µ—Ç¬ª –∫–∞–∫ —á–∞—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞', async () => {
        await tts('');
        expect(await tts('–ö–æ—Ç–∏–∫ –Ω–µ—Ç')).toMatch(/–∫–æ—Ç–∏–∫ –∑–∞ –¥–µ–¥–∫—É/i);
    });

    test('–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç tts –¥–ª—è –∂—É—á–∫–∏', async () => {
        await tts('');
        expect(await tts('–ñ—É—á–∫–∞')).toMatch(/–∂\+—É—á–∫–∞/i);
    });

    test('–†–∞—Å–ø–æ–∑–Ω–∞—ë—Ç ¬´–æ–≥—Ä–æ–º–Ω—É—é –ø—Ä–µ–æ–≥—Ä–æ–º–Ω—É—é —Å–∏–ª—å–Ω—ã–µ —Å–æ–≤—É¬ª', async () => {
        await tts('');
        expect(await tts('–ø–æ–∑–≤–∞–ª –æ–≥—Ä–æ–º–Ω—É—é –ø—Ä–µ–æ–≥—Ä–æ–º–Ω—É—é —Å–∏–ª—å–Ω—ã–µ —Å–æ–≤—É')).toMatch(/—Å–∏–ª—å–Ω–∞—è —Å–æ–≤–∞/i);
    });

    test('–†–∞—Å–ø–æ–∑–Ω–∞—ë—Ç –Ω–µ—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª. –∏ —Å—É—â.', async () => {
        await tts('');
        await tts('–º–∞–ª–µ–Ω—å–∫–∏–π –≥–æ—Ä–¥—ã–π –ø—Ç–∏—Ü–∞');

        expect(await tts('–º–∞–ª–µ–Ω—å–∫–∏–π –≥–æ—Ä–¥—ã–π –ø—Ç–∏—Ü–∞')).toMatch(
            /–º–∞–ª–µ–Ω—å–∫–∞—è –≥–æ—Ä–¥–∞—è –ø—Ç–∏—Ü–∞ –∑–∞ –º–∞–ª–µ–Ω—å–∫—É—é –≥–æ—Ä–¥—É—é –ø—Ç–∏—Ü—É /i,
        );
    });

    test('–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞—ë—Ç ¬´–ø—Ä–∏—à–ª–∞¬ª –∫–∞–∫ –ø—Ä–∏—à–ª–∞—è', async () => {
        await act('');

        expect(await act('–ø—Ä–∏—à–ª–∞ –±–∞–±—É—à–∫–∞')).toMatch(/^–ü—Ä–∏—à–ª–∞ –±–∞–±—É—à–∫–∞/i);
    });

    test('–†–∞—Å–ø–æ–∑–Ω–∞—ë—Ç ¬´–¥–µ—Ç–∫–∞¬ª –∫–∞–∫ ¬´–¥–µ–¥–∫–∞¬ª, –∞ –Ω–µ  ¬´–¥–µ–¥–æ–∫¬ª', async () => {
        await act('');

        expect(await act('–¥–µ—Ç–∫–∞')).toMatch(/–¥–µ–¥–∫–∞ üë¥ –∑–∞ –¥–µ–¥–∫—É/i);
    });

    test('–ö–Ω–æ–ø–∫–∏ —Å —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ', async () => {
        const shown: { [button: string]: boolean } = {};

        // –ü–µ—Ä–≤—ã–µ —Ç—Ä–∏ –≤—ã–∑–æ–≤–∞ –∫–Ω–æ–ø–∫–∏ –Ω–µ –ø—Ä–∏—Ö–æ–¥—è—Ç
        expect(await buttons('')).toEqual([]);
        expect(await buttons('–ê–Ω–¥—Ä–µ—è')).toEqual([]);
        expect(await buttons('–ê–Ω–¥—Ä–µ—è')).toEqual([]);

        let btns = await buttons('–ê–Ω–¥—Ä–µ—è');
        expect(btns).toHaveLength(2);

        do {
            const [first, second] = btns;

            expect(shown).not.toHaveProperty(first.text);
            second && expect(shown).not.toHaveProperty(second.text);

            shown[first.text] = true;
            btns = await buttons(first.text);
        } while (btns.length);
    });

    describe('–ó–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', () => {
        test('–∂–∏–ª–∏ –±—ã–ª–∏ –¥–µ–¥ –¥–∞ –±–∞–±–∞‚Ä¶', async () => {
            await act('');
            expect(
                await tts(
                    '–∂–∏–ª–∏ –±—ã–ª–∏ –¥–µ–¥ –¥–∞ –±–∞–±–∞ –±—ã–ª–∞ —É –Ω–∏—Ö –∫—É—Ä–æ—á–∫–∞ —Ä—è–±–∞ —Å–Ω–µ—Å–ª–∞ –∫—É—Ä–æ—á–∫–∞ —è–∏—á–∫–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ–µ –∞ –∑–æ–ª–æ—Ç–æ–µ',
                ),
            ).toMatch('–∫—É—Ä–æ—á–∫–∞ —è–∏—á–∫–æ –∑–∞ –¥–µ–¥–∫—É');
        });

        test('–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞‚Ä¶', async () => {
            await act('');
            expect(
                await tts('–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'),
            ).toMatch('–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞ –¥–µ–¥–∫—É');
        });

        test('–º–µ–∂–¥—É –Ω–∞–º–∏ —Ç–∞–µ—Ç –ª–µ–¥‚Ä¶', async () => {
            await act('');
            expect(await tts('–º–µ–∂–¥—É –Ω–∞–º–∏ —Ç–∞–µ—Ç –ª–µ–¥ –ø–æ–∑–≤–∞–ª –±–∞–±–∫—É')).toMatch('–±–∞–±–∫–∞ –∑–∞ –¥–µ–¥–∫—É');
        });

        test('—Å–Ω–µ–≥—É—Ä–æ—á–∫—É –∏ –¥–µ–¥–∞ –º–æ—Ä–æ–∑–∞‚Ä¶', async () => {
            await act('');
            expect(await tts('—Å–Ω–µ–≥—É—Ä–æ—á–∫—É –∏ –¥–µ–¥–∞ –º–æ—Ä–æ–∑–∞ –ø–æ—Å–ª–µ –Ω–∏—Ä–≤–∞–Ω—ã')).toMatch(
                '–¥–µ–¥ –º–æ—Ä–æ–∑ –∑–∞ –¥–µ–¥–∫—É',
            );
        });

        test('—É–∂–µ –≤—ã—Ç–∞—â–∏–ª–∏ –¥–∞–≤–Ω–æ‚Ä¶', async () => {
            await act('');
            expect(await tts('—è —É–∂–µ –≤—ã—Ç–∞—â–∏–ª–∏ –¥–∞–≤–Ω–æ —á—Ç–æ –≤—ã —Ç—É—Ç –ª–µ—á–∏—Ç–µ')).toMatch(
                '–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞',
            );
        });

        test('–º–µ–¥–≤–µ–¥—å –ø–æ–∑–≤–∞–ª‚Ä¶', async () => {
            await act('');
            expect(
                await tts(
                    '–º–µ–¥–≤–µ–¥—å –ø–æ–∑–≤–∞–ª –ø–æ—á–µ–º—É –≤–æ—Ç –Ω–∞–º —Ç–∞–º –ø—É–¥—Ä–∏—Ç—å —ç—Ç–æ –∂–µ –ø–æ –¥—Ä—É–≥–æ–º—É –Ω—É–∂–Ω–æ —Ç–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —á—Ç–æ –ª–∏',
                ),
            ).toMatch('–º–µ–¥–≤–µ–¥—å –∑–∞ –¥–µ–¥–∫—É');
        });

        test('–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç‚Ä¶', async () => {
            await act('');
            expect(await tts('–¥–∞ —Ç–æ–ª—å–∫–æ –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç –∞–ª–∏—Å–∞ —á—Ç–æ –ª–∏')).toMatch('–∞–ª–∏—Å–∞ –∑–∞ –¥–µ–¥–∫—É');
        });

        test('–∑–æ–ª–æ—Ç—É—é –≤–Ω—É—á–∫—É‚Ä¶', async () => {
            await act('');
            expect(await tts('–∑–æ–ª–æ—Ç—É—é –≤–Ω—É—á–∫—É –∫–æ—Ç–æ—Ä–∞—è –Ω –Ω–µ –∑–æ–ª–æ—Ç–∞—è')).toMatch(
                '–∑–æ–ª–æ—Ç–∞—è –≤–Ω—É—á–∫–∞ –∑–∞ –¥–µ–¥–∫—É',
            );
        });

        test('—Å–µ—Å—Ç—Ä—É —Ä—É—Å–∞–ª–∫—É‚Ä¶', async () => {
            await act('');
            expect(await tts('—Ä—É—Å–∞–ª–∫–∞ –ø–æ–∑–≤–∞–ª–∞ —Å–≤–æ—é –µ—â–µ 1 —Å–µ—Å—Ç—Ä—É —Ä—É—Å–∞–ª–∫—É')).toMatch(
                '—Å–µ—Å—Ç—Ä–∞ —Ä—É—Å–∞–ª–∫–∞ –∑–∞ –¥–µ–¥–∫—É',
            );
        });

        test('—á–µ—Ä–Ω—É—é –ø—Ä–∏—á–µ—Ä–Ω—É—é —Ç—É—á—É‚Ä¶', async () => {
            await act('');
            expect(await tts('—á–µ—Ä–Ω—É—é –ø—Ä–∏—á–µ—Ä–Ω—É—é —Ç—É—á—É –ø—Ä–∏ —Ç—É—á—É —Ç—É—á—É —Ç—É—á—É')).toMatch(
                '–∑–≤–∞–ª –¥–µ–¥–∫–∞ —Ç—É—á—É',
            );
        });

        test('–Ω—É –∏ —á—Ç–æ —Ç–æ –º—ã —Å–¥–∞–µ–º—Å—è‚Ä¶', async () => {
            await act('');
            expect(await tts('–Ω—É –∏ —á—Ç–æ —Ç–æ –º—ã —Å–¥–∞–µ–º—Å—è —É–∂–µ —Ö–≤–∞—Ç–∏—Ç —É–∂–µ')).toMatch(
                '–Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞',
            );
        });

        test('–∞–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –≤–∞–ª–µ—Ä—å–µ–≤–∏—á–∞‚Ä¶', async () => {
            await act('');
            expect(await tts('–æ–Ω –ø–æ–∑–≤–∞–ª –∞–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –≤–∞–ª–µ—Ä—å–µ–≤–∏—á–∞')).toMatch(
                /–∞–ª–µ–∫—Å–∞–Ω–¥—Ä –≤–∞–ª–µ—Ä—å–µ–≤–∏—á –∑–∞ –¥–µ–¥–∫—É/,
            );
        });

        test('–º–∞–Ω—å—è–∫ –∑–∞–≥–∞–¥–∫—É –≥–∞–ª—å–∫–∏‚Ä¶', async () => {
            await act('');
            expect(await tts('–º–∞–Ω—å—è–∫ –∑–∞–≥–∞–¥–∫—É –≥–∞–ª—å–∫–∏ –∑–∞ 300 –∑–∞ —Å–æ–ø–ª—é')).toMatch(/—Å–æ–ø–ª—è –∑–∞ –¥–µ–¥–∫—É/);
        });

        test('–∂—É—á–∫–∞ –Ω–µ —É–º–µ–µ—Ç –≥–æ–≤–æ—Ä–∏—Ç—å‚Ä¶', async () => {
            await act('');
            expect(await tts('–∂—É—á–∫–∞ –Ω–µ —É–º–µ–µ—Ç –≥–æ–≤–æ—Ä–∏—Ç—å –æ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –Ω–∏–∫–æ–≥–æ –ø–æ–∑–≤–∞—Ç—å')).toMatch(
                /–∂\+—É—á–∫–∞ –∑–∞ –¥–µ–¥–∫—É/,
            );
        });
    });

    //#region tests infrastructure
    let session: Session;

    async function act(command: string, random100 = 0): Promise<string> {
        const {
            speech: { text },
            session: nextSession,
        } = await mainDialog(command, session, { stemmer, random100 });
        session = nextSession;
        return text;
    }

    async function tts(command: string, random100 = 0): Promise<string> {
        const {
            speech: { tts },
            session: nextSession,
        } = await mainDialog(command, session, { stemmer, random100 });
        session = nextSession;
        return tts;
    }

    async function buttons(command: string, random100 = 0) {
        const { buttons, session: nextSession } = await mainDialog(command, session, {
            stemmer,
            random100,
        });
        session = nextSession;
        return buttons;
    }

    beforeEach(() => {
        session = Session.create();
    });
    //#endregion
});
